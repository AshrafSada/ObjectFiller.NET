{"name":"Objectfiller.NET","tagline":"ObjectFiller .NET","body":"#ObjectFiller.NET\r\n<img align=\"left\" src=\"https://raw.githubusercontent.com/Tynamix/ObjectFiller.NET/master/logo.png\" alt=\"Logo\" />\r\nThe **.NET ObjectFiller** fills the properties of your .NET objects with random data!\r\nIt has a very comfortable Fluent API.\r\nYou are able to fill object instances or you just let them create for you. \r\nIt is possible to create instances of classes which have constructors with parameters.\r\nYou can also fill properties which are derived by a interface.\r\nThe **.NET ObjectFiller** also supports IEnumerable<T> (and all derivations) and Dictionaries.\r\n\r\n##Table of contents\r\n - [Where can i get it?](#where-can-i-get-it)\r\n - [For what do you need it?](#for-what-do-you-need-it)\r\n - [Can i extend the .NET ObjectFiller?](#can-i-extend-the-net-objectfiller)\r\n - [Examples](#examples)\r\n   - [Let's start easy](#lets-start-easy)\r\n   - [Let's use the fluent setup API](#lets-use-the-fluent-setup-api)\r\n   - [Ignore Properties](#ignore-properties)\r\n   - [Setup Subtypes](#setup-subtypes)\r\n   - [Fill objects with the IEnumerable interface](#fill-objects-with-the-ienumerable-interface)\r\n   - [Fill objects with constructor arguments](#fill-objects-with-constructor-arguments)\r\n   - [Fill Interface-Properties](#fill-interface-properties)\r\n   - [Fill Lists and Dictionaries](#fill-lists-and-dictionaries)\r\n   - [Mix all up](#mix-all-up)\r\n - [Available Plugins](#available-plugins)\r\n   - [IntRangePlugin](#rangeintegerplugin)\r\n   - [MnemonicStringPlugin](#mnemonicstringplugin)\r\n   - [RealNamePlugin](#realnameplugin)\r\n   - [RandomListItem Plugin](#randomlistitem---plugin)\r\n   - [PatternGenerator Plugin](#patterngenerator-plugin)\r\n   - [Lorem Ipsum String Plugin](#lorem-ipsum-string-plugin)\r\n   - [Sequence Generator Plugin](#sequencegenerator-plugins)\r\n - [Write your own plugin](#write-your-own-plugin)\r\n - [Thank you](#thank-you-for-using-objectfillernet)\r\n   \r\n\r\n##Where can i get it?\r\nEasy, you can find it at nuget! It's just one DLL!\r\n**Look here:** https://www.nuget.org/packages/Tynamix.ObjectFiller\r\n\r\n\r\n##For what do you need it?\r\n\r\nYou can use the **.NET ObjectFiller** for generating test data for your **UnitTests** or for your **DesignViewModels** in WPF or for whatever you need some random testdata.\r\nI will show you some examples how you can work with it.\r\n\r\n**The ObjectFiller.NET ...:**\r\n*   ...fill the public properties of your objects - even with private setters\r\n*   ...fills also all subobjects\r\n*   ...has a nice FluentAPI\r\n*   ...handles constructors with parameters\r\n*   ...handles IEnumerable<T> and all derivations\r\n*   ...handles Dictionaries\r\n*   ...handles Interfaces\r\n*   ...handles Enumerations\r\n*   ...is highly customizable\r\n*   ...has many nice plugins\r\n*   ...is very easy to extend\r\n\r\n##Can I extend the .NET ObjectFiller?\r\n\r\nOf course! The **.NET ObjectFiller** is very flexible and easy to extend. With the help of the **FluentAPI** you can configure and extend the ObjectFiller. You are also able to [write your own **Plugin**](#write-your-own-plugin)! In the examples I will show you how to do it. \r\n\r\n##Examples\r\n\r\n###Let's start easy\r\n\r\n```csharp\r\npublic class Person\r\n{\r\n    public string Name { get; set; }\r\n    public string LastName { get; set; }\r\n    public int Age { get; set; }\r\n    public DateTime Birthday { get; set; }\r\n}\r\n\r\npublic class HelloFiller\r\n{\r\n\tpublic void CreatePerson()\r\n\t{\r\n\t    Filler<Person> pFiller = new Filler<Person>();\r\n\t    Person p = pFiller.Create();\r\n\t}\r\n}\r\n```\r\n\r\nNothing special, it will just create a instance of a **```Person```** and fill it with some random data.\r\n\r\n```csharp\r\npublic class Person\r\n{\r\n    public string Name { get; set; }\r\n    public string LastName { get; set; }\r\n    public int Age { get; set; }\r\n    public DateTime Birthday { get; set; }\r\n}\r\n\r\npublic class HelloFiller\r\n{\r\n    public void FillPerson()\r\n    {\r\n        Person person = new Person();\r\n\r\n        Filler<Person> pFiller = new Filler<Person>();\r\n        Person p = pFiller.Fill(person);\r\n    }\r\n}\r\n```\r\n\r\nIt is also possible to fill an already existing instance of an object. In the example we first create a person and then call ```Fill(...)``` instead of ```Create()```. This is great for stuff like DesignViewModels in WPF or whereever you need to fill the object in the constructor with ```Fill(this)``` for example.\r\n\r\n###Let's use the fluent setup API\r\n\r\n```csharp\r\n    public class Person\r\n    {\r\n        public string Name { get; set; }\r\n        public string LastName { get; set; }\r\n        public int Age { get; set; }\r\n        public DateTime Birthday { get; set; }\r\n    }\r\n\r\n    public class HelloFiller\r\n    {\r\n        public void FillPerson()\r\n        {\r\n            Filler<Person> pFiller = new Filler<Person>();\r\n            pFiller.Setup()\r\n                .OnType<string>().Use(() => \"SomeString\")\r\n                .OnType<DateTime>().Use(() => new DateTime(2014, 4, 1));\r\n            Person p = pFiller.Create();\r\n        }\r\n    }\r\n```\r\n\r\nSo what does the above code do? First you say **```pFiller.Setup()```**. With **```.Setup()```** you start configure the ObjectFiller. With **```OnType<T>()```** you define which type will be configured and with **```.Use( ... )```** you define what the Objectfiller should do with the type. You are able to write your own **```.Func<T>()```** or implement a **```IRandomizerPlugin<T>```**, or just use one of the provided plugins. ObjectFiller is very flexible and easy to extend!\r\nIn this example we say to the ObjectFiller: Hey ObjectFiller, whenever there will be a property of type **```string```**, just fill it with the word \"SomeString\". And when there is a **```DateTime```** set it always to 1.4.2014! Easy! Isn't it? But it will get even cooler!\r\n\r\n```csharp\r\n    public class Person\r\n    {\r\n        public string Name { get; set; }\r\n        public string LastName { get; set; }\r\n        public int Age { get; set; }\r\n        public DateTime Birthday { get; set; }\r\n    }\r\n\r\n    public class HelloFiller\r\n    {\r\n        public void FillPerson()\r\n        {\r\n            Filler<Person> pFiller = new Filler<Person>();\r\n            pFiller.Setup()\r\n                .OnProperty(p=>p.Name).Use(() => \"John\")\r\n                .OnProperty(p => p.LastName).Use(new RealNames(false, true));\r\n\r\n            Person filledPerson = pFiller.Create();\r\n        }\r\n    }\r\n```\r\n\r\nHere we say: Ok ObjectFiller, fill the property **```Name```** of a **```Person```** with the value \"John\" and fill the property **```LastName```** with some random real lastname. The **```.OnProperty```** method works very similar to the **```OnType<T>()```** method! With **```.Use(new RealNames(false, true));```** we use a **```RealNamePlugin```**.\r\nThe **```RealNamePlugin```** is a plugin which comes with the ObjectFiller assembly along.\r\nIts also really easy to write a plugin by yourself. I will show you that later.\r\n\r\n###Ignore Properties\r\n\r\n```csharp\r\n    public class Person\r\n    {\r\n        public string Name { get; set; }\r\n        public string LastName { get; set; }\r\n        public int Age { get; set; }\r\n        public DateTime Birthday { get; set; }\r\n    }\r\n\r\n    public class HelloFiller\r\n    {\r\n        public void FillPerson()\r\n        {\r\n            Filler<Person> pFiller = new Filler<Person>();\r\n            pFiller.Setup()\r\n                .OnProperty(x=>x.LastName, x=>x.Name).IgnoreIt();\r\n\r\n            Person filledPerson = pFiller.Create();\r\n        }\r\n    }\r\n```\r\n\r\nWith **```.IgnoreIt()```** you can exclude properties from randomizing, they will keep their default value instead. When we will now fill a person, all properties get filled except **```LastName```** and **```Name```**.\r\n\r\n```csharp\r\n    public class Person\r\n    {\r\n        public string Name { get; set; }\r\n        public string LastName { get; set; }\r\n        public int Age { get; set; }\r\n        public DateTime Birthday { get; set; }\r\n    }\r\n\r\n    public class HelloFiller\r\n    {\r\n        public void FillPerson()\r\n        {\r\n            Filler<Person> pFiller = new Filler<Person>();\r\n            pFiller.Setup()\r\n                .OnType<string>().IgnoreIt();\r\n\r\n            Person filledPerson = pFiller.Create();\r\n        }\r\n    }\r\n```\r\n\r\nThe same method **```.IgnoreIt()```** is also available after you call **```.OnType<T>()```** for types. With that it is possible to exclude all properties of a specific type. When we will now fill a person, all properties get filled except **```LastName```** and **```Name```** because they are of type **```string```**.\r\n\r\n###Setup Subtypes\r\n\r\n```csharp\r\n    public class Person\r\n    {\r\n        public string Name { get; set; }\r\n        public string LastName { get; set; }\r\n        public int Age { get; set; }\r\n        public DateTime Birthday { get; set; }\r\n        public Address Address { get; set; }\r\n\r\n    }\r\n\r\n    public class Address\r\n    {\r\n        public string Street { get; set; }\r\n        public string City { get; set; }\r\n    }\r\n\r\n    public class HelloFiller\r\n    {\r\n        public void FillPerson()\r\n        {\r\n            Filler<Person> pFiller = new Filler<Person>();\r\n            pFiller.Setup()\r\n                .OnProperty(x => x.Name).Use(() => \"John\")\r\n                .SetupFor<Address>()\r\n                .OnProperty(x => x.City).Use(() => \"Dresden\");\r\n\r\n            Person filledPerson = pFiller.Create();\r\n        }\r\n    }\r\n```\r\n\r\nWith **```SetupFor<T>```** you start a setup for another type. In the example above we define that the ```Name``` of the ```Person``` will be \"John\" and the ```City``` of an ```Address``` object will be \"Dresden\". **```SetupFor<T>```** takes an ```bool``` parameter. If this is set to **```true```** then all the settings which were made on the parent type will be set back to default. When a property is not set up, then the filler will take the setup of the parent type, except the settings which are made specially for this actual type.\r\n\r\n###Fill objects with the IEnumerable interface\r\n\r\nWith ObjectFiller.NET you can use the IEnumerable interface to fill objects. Use it for example when you want to fill a property in a specific order with include and exclude and all the other cool stuff which IEnumerable and LINQ supports.\r\n\r\n```csharp\r\n    public class Person\r\n    {\r\n        public string Name { get; set; }\r\n        public string LastName { get; set; }\r\n        public int Age { get; set; }\r\n        public DateTime Birthday { get; set; }\r\n\r\n        public List<Address> Addresses { get; set; }\r\n    }\r\n\r\n    public class Address\r\n    {\r\n        public int Id { get; set; }\r\n\r\n        public string Street { get; set; }\r\n    }\r\n\r\n    public class HelloFiller\r\n    {\r\n        public void FillPerson()\r\n        {\r\n            Filler<Person> pFiller = new Filler<Person>();\r\n            pFiller.Setup()\r\n                .SetupFor<Address>()\r\n                .OnProperty(x => x.Id).Use(Enumerable.Range(1, 100).Where(x => x % 2 == 0));\r\n\r\n            Person filledPerson = pFiller.Create();\r\n        }\r\n    }\r\n```\r\nIn this example the ID of an Address item will be an even number between 1 and 100 in ascending order.\r\nThis means, the first Address will have the Id 2, the second the Id 4, the fourth Id 6 and so...\r\n\r\n###Fill objects with constructor arguments\r\n\r\n```csharp\r\n    public class Person\r\n    {\r\n        public Person(Address address)\r\n        {\r\n            Address = address;\r\n        }\r\n\r\n        public string Name { get; set; }\r\n        public string LastName { get; set; }\r\n        public int Age { get; set; }\r\n        public DateTime Birthday { get; set; }\r\n        public Address Address { get; set; }\r\n\r\n    }\r\n\r\n    public class Address\r\n    {\r\n        public string Street { get; set; }\r\n        public string City { get; set; }\r\n    }\r\n\r\n    public class HelloFiller\r\n    {\r\n        public void FillPerson()\r\n        {\r\n            Filler<Person> pFiller = new Filler<Person>();\r\n            pFiller.Setup()\r\n                .OnProperty(x=>x.Address).IgnoreIt();\r\n\r\n            Person filledPerson = pFiller.Create();\r\n        }\r\n    }\r\n```\r\n\r\nWith ObjectFiller.NET it is also possible to **instantiate** objects which have a **constructor WITH parameters**. \r\nIn the above setup I ignore the **```Address```** property. \r\n\r\nNow lets do something really cool.\r\n\r\n###Fill Interface-Properties\r\n\r\n```csharp\r\n    public class Person\r\n    {\r\n        public string Name { get; set; }\r\n        public string LastName { get; set; }\r\n        public int Age { get; set; }\r\n        public DateTime Birthday { get; set; }\r\n        public IAddress Address { get; set; }\r\n    }\r\n\r\n    public class Address : IAddress\r\n    {\r\n        public string Street { get; set; }\r\n        public string City { get; set; }\r\n    }\r\n\r\n    public interface IAddress { }\r\n\r\n    public class HelloFiller\r\n    {\r\n        public void FillPerson()\r\n        {\r\n            Filler<Person> pFiller = new Filler<Person>();\r\n            pFiller.Setup()\r\n                .OnType<IAddress>().Register<Address>();\r\n\r\n            Person filledPerson = pFiller.Create();\r\n        }\r\n    }\r\n```\r\n\r\nYou see? The **```Person```** has now an **```Address```**. But wait? It is an **```IAddress```**! An **interface**? \r\nYES! And ObjectFiller can handle that. Just say **```.Register<T>()```** after you called **```.OnType<T>()```** and give the ObjectFiller the information what is the concrete implementation for that interface. Nice huh?\r\n\r\n###Fill Lists and Dictionaries\r\n\r\n```csharp\r\n    public class Person\r\n    {\r\n        public Dictionary<string, List<Address>> SenselessDictionary { get; set; }\r\n        public List<IAddress> SenselessList { get; set; }\r\n    }\r\n\r\n    public class Address : IAddress\r\n    {\r\n        public string Street { get; set; }\r\n        public string City { get; set; }\r\n    }\r\n\r\n    public interface IAddress { }\r\n\r\n    public class HelloFiller\r\n    {\r\n        public void FillPerson()\r\n        {\r\n            Filler<Person> pFiller = new Filler<Person>();\r\n            pFiller.Setup()\r\n                .OnType<IAddress>().CreateInstanceOf<Address>();\r\n\r\n            Person filledPerson = pFiller.Create();\r\n        }\r\n    }\r\n```\r\n\r\nIt is also really easy possible to fill **```Dictionary```** and **```Lists```** objects.\r\n\r\n###Mix all up\r\n\r\n```csharp\r\n    public class Person\r\n    {\r\n        public Person(IAddress address)\r\n        {\r\n            Address = address;\r\n        }\r\n        public string Name { get; set; }\r\n        public string LastName { get; set; }\r\n        public int Age { get; set; }\r\n        public DateTime Birthday { get; set; }\r\n        public IAddress Address { get; set; }\r\n\r\n        public Dictionary<string, List<Address>> SenselessDictionary { get; set; }\r\n        public List<IAddress> SenselessList { get; set; }\r\n    }\r\n\r\n    public class Address : IAddress\r\n    {\r\n        public string Street { get; set; }\r\n        public string City { get; set; }\r\n    }\r\n\r\n    public interface IAddress { }\r\n\r\n    public class HelloFiller\r\n    {\r\n        public void FillPerson()\r\n        {\r\n            Filler<Person> pFiller = new Filler<Person>();\r\n            pFiller.Setup()\r\n                .OnType<IAddress>().CreateInstanceOf<Address>()\r\n                .OnProperty(p => p.LastName, p => p.Name).Use(new RealNames(true, false))\r\n                .OnProperty(p => p.Age).Use(() => new Random().Next(10, 32))\r\n                .SetupFor<Address>()\r\n                .OnProperty(p => p.City).Use(new MnemonicString(1))\r\n                .OnProperty(x => x.Street).IgnoreIt();\r\n\r\n            Person filledPerson = pFiller.Create();\r\n        }\r\n    }\r\n```\r\n\r\n**Now let us mix all up!** What happens here? Well, we say: Ok ObjectFiller, the **```IAddress```** interface will be implemented by the **```Address```** class.\r\nThe **```Name```** and **```LastName```** of a person will be generated by the **```RealNamesPlugin```**. The age of the person should be somewhere between 10 and 32. \r\nWhen you generate a city use the **```MnemonicStringPlugin```** and finally ignore the Street in the **```Address```**. Quite a lot. But it works!\r\n\r\n##Available Plugins\r\n\r\nThe ObjectFiller.NET is easy to extend, you can write your own plugins for it.\r\nThere are several plugins already implemented which are documented below.\r\n\r\n###RangeIntegerPlugin\r\n\r\nThe **```RangeIntegerPlugin```** is a very simple plugin and generates integers in a given range.\r\nIt has up to two constructor parameter. The first one is the maximum value and the second one (optional) the minimum. When minimum is not set, the minimum will be 0!\r\n\r\n```csharp\r\n    public class Person\r\n    {\r\n        public string Name { get; set; }\r\n        public string LastName { get; set; }\r\n        public int Age { get; set; }\r\n        public DateTime Birthday { get; set; }\r\n    }\r\n\r\n    public class HelloFiller\r\n    {\r\n        public void FillPerson()\r\n        {\r\n            Filler<Person> pFiller = new Filler<Person>();\r\n            pFiller.Setup()\r\n                .OnType<int>().Use(new IntRange(20, 79));\r\n\r\n            Person filledPerson = pFiller.Create();\r\n        }\r\n    }\r\n```\r\n\r\n###MnemonicStringPlugin\r\n\r\nThe **```MnemonicStringPlugin```** generates mnemonic words. A mnemonic word is a word with every second letter is a vowel. For example: Dubinola\r\nThe advantage is that these words are mostly easy to pronounce.\r\n\r\n```csharp\r\n    public class Person\r\n    {\r\n        public string Name { get; set; }\r\n    }\r\n\r\n    public class HelloFiller\r\n    {\r\n        public void FillPerson()\r\n        {\r\n            Filler<Person> pFiller = new Filler<Person>();\r\n            pFiller.Setup()\r\n                .OnType<string>().Use(new MnemonicString(1,5,10));\r\n                \r\n            Person filledPerson = pFiller.Create();\r\n        }\r\n    }\r\n```\r\n\r\nIn this example we see how to use the **```MnemonicStringPlugin```**. It has three constructor parameters. The first one defines how much words will be generated. The second is the word min length and the last one is the word max length.\r\n\r\n###RealNamePlugin\r\n\r\nThe **```RealNamePlugin```** is made to generate strings based on real names like \"Jennifer\" or \"Miller\". The realname plugin contains about 5000 first- and last names. \r\n\r\n```csharp\r\n        public class Person\r\n        {\r\n            public string FirstName { get; set; }\r\n            public string LastName { get; set; }\r\n            public string FullName { get; set; }\r\n            public string FullNameReverse { get; set; }\r\n        }\r\n\r\n        public class HelloFiller\r\n        {\r\n            public void FillPerson()\r\n            {\r\n                Filler<Person> pFiller = new Filler<Person>();\r\n                pFiller.Setup()\r\n                    .OnProperty(x => x.FirstName).Use(new RealNames(RealNameStyle.FirstNameOnly))\r\n                    .OnProperty(x => x.LastName).Use(new RealNames(RealNameStyle.LastNameOnly))\r\n                    .OnProperty(x => x.FullName).Use(new RealNames(RealNameStyle.FirstNameLastName))\r\n                    .OnProperty(x => x.FullNameReverse).Use(new RealNames(RealNameStyle.LastNameFirstName));\r\n\r\n                Person filledPerson = pFiller.Create();\r\n            }\r\n        }\r\n```\r\n\r\nThe **```RealNamePlugin```** has a ```RealNameStyle``` enumeration as constructor parameter. With that enumeration you are able to define how the generated name should look like.\r\n\r\n###RandomListItem - Plugin\r\n\r\nThe **```RandomListItem```** plugin is usefull when you want to choose the output values from a certain set of values. The **```RandomListItem```** will then pick randomly one item from the list.\r\n\r\n```csharp\r\n     public class Person\r\n    {\r\n        public string Name { get; set; }\r\n    }\r\n\r\n    public class HelloFiller\r\n    {\r\n        public void FillPerson()\r\n        {\r\n            List<string> allNames = new List<string>() { \"Jennifer\", \"Jenny\", \"Tom\", \"John\" };\r\n\r\n            Filler<Person> pFiller = new Filler<Person>();\r\n            pFiller.Setup()\r\n                .OnType<string>().Use(new RandomListItem<string>(allNames));\r\n\r\n            Person filledPerson = pFiller.Create();\r\n        }\r\n    }\r\n```\r\n\r\nIn the example you can see that I set up four value, one of them  will be the generated name of the **```Person```** object.\r\n\r\n###PatternGenerator Plugin\r\n\r\nThe **```PatternGenerator```** can be used to created strings following a certain pattern. The actual pattern documentation can be found in **```PatternGenerator```** documentation.\r\n\r\n```csharp\r\n    public class Person\r\n    {\r\n        public string Name { get; set; }\r\n        public string LastName { get; set; }\r\n        public int Age { get; set; }\r\n        public DateTime Birthday { get; set; }\r\n        public List<Address> Address { get; set; }\r\n    }\r\n\r\n    public class Address\r\n    {\r\n        public string Street { get; set; }\r\n        public string City { get; set; }\r\n        public string PostalCode { get; set; }\r\n    }\r\n\r\n    public class HelloFiller\r\n    {\r\n        public void FillPerson()\r\n        {\r\n            Filler<Person> pFiller = new Filler<Person>();\r\n\r\n            pFiller.Setup()\r\n                .SetupFor<Address>()\r\n                .OnProperty(x => x.City).Use(new PatternGenerator(\"{A}{a:2-8}\"))\r\n                .OnProperty(x => x.PostalCode).Use(new PatternGenerator(\"CA {C:10000}\"))\r\n                .OnProperty(x => x.Street).Use(new PatternGenerator(\"Main Street {C:100,10} NE\"));\r\n\r\n            Person filledPerson = pFiller.Create();\r\n        }\r\n    }\r\n```\r\n\r\nSome explanation is in order, I think:\r\nAddress.City will become a string, starting with exactly one upper-case char, followed by 2..8 lower-case chars.\r\nAddress.PostalCode will start with the fixed value \"CA \", followed by a number starting at 10000, incremented by 1 in the next address in the persons address list.\r\nThe street property will contain the text \"Main Street \", followed by a (street) number starting at 100, incremented by 10.\r\n\r\nThe pattern generator can be extended, to allow combining built-in expressions and custom expressions within a pattern.\r\n\r\n```csharp\r\n    public class FrenchWordExpressionGenerator : IExpressionGenerator<string>\r\n    {\r\n        public static IExpressionGenerator TryCreateInstance(string expression)\r\n        {\r\n \t\t\tif (expression == \"{F}\")\r\n\t\t\t\treturn new FrenchWordExpressionGenerator();\r\n\t\t\telse \r\n\t\t\t\treturn null;\r\n       }\r\n       \r\n       public string GetValue()\r\n       {    \r\n            return \"Bonjour\";\r\n       }\r\n    }\r\n    \r\n    public void FillPerson()\r\n    {\r\n        PatterGenerator.ExpressionGeneratorFactories.Add(FrenchWordExpressionGenerator.TryCreateInstance);\r\n    \r\n        Filler<Person> pFiller = new Filler<Person>();\r\n        \r\n\t\tpFiller.Setup()\r\n\t\t\t.OnType<IAddress>().Register<Address>()\r\n\t\t\t.SetupFor<Address>()\r\n\t\t\t.OnProperty(x => x.Street).Use(new PatternGenerator(\"{C}x {F}\"));\r\n    }\r\n```\r\n\r\n###Lorem Ipsum String Plugin\r\n\r\nThe \"Lorem Ipsum\" plugin generates some random text which contains the famous \"Lorem Ipsum\" text. Read more about the Lorem Ipsum [here](http://en.wikipedia.org/wiki/Lorem_ipsum)\r\n\r\n```csharp\r\n    public class Person\r\n    {\r\n        public string Name { get; set; }\r\n        public string LastName { get; set; }\r\n        public int Age { get; set; }\r\n        public DateTime Birthday { get; set; }\r\n    }\r\n\r\n    public class HelloFiller\r\n    {\r\n        public void FillPerson()\r\n        {\r\n            Filler<Person> pFiller = new Filler<Person>();\r\n            pFiller.Setup()\r\n                .OnType<string>().Use(new LoremIpsum(500));\r\n\r\n            Person filledPerson = pFiller.Create();\r\n        }\r\n    }\r\n```\r\nThis example generates a Lorem Ipsum text with 500 words for all ```string``` properties of the person.\r\n\r\n###SequenceGenerator Plugins\r\n\r\nThe ObjectFiller contains also tons of sequence generators, like the SequenceGeneratorInt32 or the SequenceGeneratorDateTime. When used without any particular setup, they will simply create an increasing sequence like [1,2,3,...]. Most of these sequence generators can be customized to use a different start value (From), a different increment (Step) or can even wrap around after hitting an end value (To). The Step property can be even set to a negative value to generate a decreasing sequence, like in the example below.\r\n\r\n```csharp\r\n    public void Countdown()\r\n    {\r\n        var generator = new SequenceGeneratorInt32 { From = 3, Step = -3 };\r\n        generator.GetValue(); // returns  3\r\n        generator.GetValue(); // returns  0\r\n        generator.GetValue(); // returns -3\r\n        generator.GetValue(); // returns -6\r\n    }\r\n```\r\n\r\n###Write your own plugin\r\n\r\nWriting your own plugin is very easy.\r\nJust implement the **``` IRandomizerPlugin<T> ```** plugin. The typeparameter **```T```** defines for which type you will write the plugin. The interface just has one function which you have to implement: **```T GetValue();```**\r\nThats all!\r\nYou can write plugins for simple types and complex types.\r\n\r\nHere is a very simple example:\r\n\r\n```csharp\r\n  public class MyFirstPlugin : IRandomizerPlugin<string>\r\n    {\r\n        private readonly Random r = new Random();\r\n        private readonly List<string> allNames = new List<string>() { \"Jennifer\", \"Jenny\", \"Tom\", \"John\" };\r\n        \r\n        public string GetValue()\r\n        {\r\n            return allNames[r.Next(0, allNames.Count)];\r\n        }\r\n    }\r\n\r\n    public class Person\r\n    {\r\n        public string Name { get; set; }\r\n    }\r\n\r\n    public class HelloFiller\r\n    {\r\n        public void FillPerson()\r\n        {\r\n            ObjectFiller<Person> pFiller = new ObjectFiller<Person>();\r\n            pFiller.Setup()\r\n                .RandomizerForType<string>(new MyFirstPlugin());\r\n\r\n            Person filledPerson = pFiller.Create();\r\n        }\r\n    }\r\n```\r\n\r\n**```MyFirstPlugin```** does basically the same thing as the **```RandomListItem```** plugin, but it is a good way to show you how easy it is to implement your own plugin.\r\n\r\n##Thank you for using ObjectFiller.NET\r\n\r\nIf you have any questions or found bugs, have ideas for improvements, feel free to contact me!\r\n","google":"UA-49854919-2","note":"Don't delete this file! It's used internally to help with page regeneration."}